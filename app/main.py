from fastapi import FastAPI, Request, Depends
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from starlette.middleware.sessions import SessionMiddleware
from sqlalchemy.orm import Session
from .config import settings
from .db import engine, Base, get_db
from .routers import (
    web_public,
    web_products,
    web_orders,
    web_analytics,
    web_admin_panel,
    api,
    web_shop,
    shop_api,
    shop_admin,
    qr_scanner,
    delivery_payment,
    delivery_notifications,
)
from .services.auth import get_current_user_optional
import logging

# Configure logging
log_level = getattr(logging, settings.log_level.upper(), logging.INFO)
logging.basicConfig(
    level=log_level,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("sirius.log", encoding="utf-8")
    ]
)
logger = logging.getLogger(__name__)

# Self-check: validate imports and configuration
try:
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Sirius Sklad")
    logger.info("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ —Ä–æ—É—Ç–µ—Ä–æ–≤...")
    # All routers are imported above, if there's an error it will be caught here
    logger.info("‚úÖ –í—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    
    logger.info("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    logger.info(f"‚úÖ Environment: {settings.environment}")
    logger.info(f"‚úÖ Debug mode: {settings.debug}")
    logger.info(f"‚úÖ Log level: {settings.log_level}")
    logger.info(f"‚úÖ Database URL: {settings.database_url[:20]}...")
    
    # Check optional services
    if settings.telegram_bot_token:
        logger.info("‚úÖ Telegram notifications: –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    else:
        logger.info("‚ÑπÔ∏è Telegram notifications: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
    if settings.smtp_host:
        logger.info("‚úÖ Email notifications: –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    else:
        logger.info("‚ÑπÔ∏è Email notifications: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
except Exception as e:
    logger.error(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
    raise

# Create tables only in development mode
if settings.environment == "development" and settings.debug:
    logger.info("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ development —Ä–µ–∂–∏–º–µ...")
    Base.metadata.create_all(bind=engine)
    logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
else:
    logger.info("‚ÑπÔ∏è Production —Ä–µ–∂–∏–º: —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –º–∏–≥—Ä–∞—Ü–∏–∏")

# Create FastAPI app
app = FastAPI(
    title="–°–∏—Ä–∏—É—Å - –°–∏—Å—Ç–µ–º–∞ —É—á—ë—Ç–∞ —Å–∫–ª–∞–¥–∞",
    description="–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º, –∑–∞–∫–∞–∑–∞–º–∏ –∏ –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏",
    version="1.0.0"
)

# Add session middleware
app.add_middleware(
    SessionMiddleware,
    secret_key=settings.secret_key,
    max_age=settings.session_max_age,
    same_site="lax",  # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –±—Ä–∞—É–∑–µ—Ä–∞–º–∏
    https_only=False  # –†–∞–∑—Ä–µ—à–∞–µ–º HTTP –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
)

# Mount static files
app.mount("/static", StaticFiles(directory="app/static"), name="static")

# Templates
templates = Jinja2Templates(directory="app/templates")

# Include routers
app.include_router(web_public.router)
app.include_router(web_products.router)
app.include_router(web_orders.router)
app.include_router(web_analytics.router, prefix="/admin")
app.include_router(web_admin_panel.router)
app.include_router(api.router, prefix="/api")
app.include_router(shop_api.router)  # API —Ä–æ—É—Ç–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–ï–†–ï–î web_shop
app.include_router(web_shop.router)  # Web —Ä–æ—É—Ç–µ—Ä –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –ü–û–°–õ–ï API
app.include_router(shop_admin.router)
app.include_router(qr_scanner.router)
app.include_router(delivery_payment.router)
app.include_router(delivery_notifications.router)

# –†–æ—É—Ç—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
@app.get("/")
async def root(request: Request, db: Session = Depends(get_db)):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    current_user = get_current_user_optional(request, db)
    return templates.TemplateResponse("index.html", {"request": request, "current_user": current_user})


@app.get("/health")
@app.head("/health")
async def health_check():
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return {"status": "ok"}


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
